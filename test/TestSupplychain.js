// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1;
  var upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  var productID = sku + upc;
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.utils.toWei(".01", "ether");
  var itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x00000000000000000000000000000000000000";

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Retailer: accounts[3] ", accounts[3]);
  console.log("Consumer: accounts[4] ", accounts[4]);

  // Setup Test
  it("Testing add role to account", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Add role to account
    await supplyChain.addFarmer(originFarmerID);
    await supplyChain.addDistributor(distributorID);
    await supplyChain.addRetailer(retailerID);
    await supplyChain.addConsumer(consumerID);

    // Verify result
    var isFarmer = await supplyChain.isFarmer(originFarmerID);
    var isDistributor = await supplyChain.isDistributor(distributorID);
    var isRetailer = await supplyChain.isRetailer(retailerID);
    var isConsumer = await supplyChain.isConsumer(consumerID);

    assert.equal(isFarmer, true, "Invalid originFarmerID");
    assert.equal(isDistributor, true, "Invalid distributorID");
    assert.equal(isRetailer, true, "Invalid retailerID");
    assert.equal(isConsumer, true, "Invalid consumerID");
  });

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Harvested()
    await supplyChain.Harvested((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes
    );

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Invalid item UPC");
    assert.equal(resultBufferOne[2], originFarmerID, "Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Invalid originFarmName");
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[2], productID, "Invalid productID");
    assert.equal(resultBufferTwo[5], 0, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Processed()
    await supplyChain.Processed((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferTwo[5], 1, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Packed()
    await supplyChain.Packed((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferTwo[5], 2, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event ForSale()
    await supplyChain.ForSale((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as ForSale by calling function sellItem()
    await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferTwo[4], productPrice, "Invalid product price");
    assert.equal(resultBufferTwo[5], 3, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Balance of account before transfer
    const farmerBalaneBefore = await web3.eth.getBalance(originFarmerID);
    const distributorBalaneBefore = await web3.eth.getBalance(distributorID);

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Sold()
    await supplyChain.Sold((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Sold by calling function buyItem()
    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: Number(productPrice) + 1000,
      gasPrice: 0,
    });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    const farmerBalaneAfter = await web3.eth.getBalance(originFarmerID);
    const distributorBalaneAfter = await web3.eth.getBalance(distributorID);
    const value1 = Number(farmerBalaneAfter) - Number(farmerBalaneBefore);
    const value2 =
      Number(distributorBalaneBefore) - Number(distributorBalaneAfter);

    // Verify the result set
    assert.equal(resultBufferOne[2], distributorID, "Invalid ownerID");
    assert.equal(resultBufferTwo[6], distributorID, "Invalid distributorID");
    assert.equal(resultBufferTwo[5], 4, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
    assert.equal(value1, productPrice, "Invalid transfer money to farmer");
    assert.equal(value2, productPrice, "Invalid refund money to distributor");
  });

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Shipped()
    await supplyChain.Shipped((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Shipped by calling function shipItem()
    await supplyChain.shipItem(upc, { from: distributorID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferTwo[5], 5, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Received()
    await supplyChain.Received((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Received by calling function receiveItem()
    await supplyChain.receiveItem(upc, { from: retailerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[2], retailerID, "Invalid ownerID");
    assert.equal(resultBufferTwo[7], retailerID, "Invalid retailerID");
    assert.equal(resultBufferTwo[5], 6, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Purchased()
    await supplyChain.Purchased((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Purchased by calling function purchaseItem()
    await supplyChain.purchaseItem(upc, { from: consumerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[2], consumerID, "Invalid ownerID");
    assert.equal(resultBufferTwo[8], consumerID, "Invalid consumerID");
    assert.equal(resultBufferTwo[5], 7, "Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

    // Verify the result set:
    assert.equal(resultBufferOne[0], sku, "Invalid sku");
    assert.equal(resultBufferOne[1], upc, "Invalid upc");
    assert.equal(resultBufferOne[2], consumerID, "Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Invalid originFarmName");
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Invalid originFarmLongitude"
    );
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set:
    assert.equal(resultBufferTwo[0], sku, "Invalid sku");
    assert.equal(resultBufferTwo[1], upc, "Invalid upc");
    assert.equal(resultBufferTwo[2], productID, "Invalid productID");
    assert.equal(resultBufferTwo[3], productNotes, "Invalid productNotes");
    assert.equal(resultBufferTwo[4], productPrice, "Invalid productPrice");
    assert.equal(resultBufferTwo[5], 7, "Invalid itemState");
    assert.equal(resultBufferTwo[6], distributorID, "Invalid distributorID");
    assert.equal(resultBufferTwo[7], retailerID, "Invalid retailerID");
    assert.equal(resultBufferTwo[8], consumerID, "Invalid consumerID");
  });
});
